function [path, cost] = shortestpath(G, start, goal)
% SHORTESTPATH Find the shortest path from start to goal on the given Graph.
%   PATH = SHORTESTPATH(Graph, start, goal) returns an M-by-1 matrix, where each row
%   consists of the node on the path.  The first
%   row is start and the last row is goal.  If no path is found, PATH is a
%   0-by-1 matrix.
%
%   [PATH, COST] = SHORTESTPATH(...) returns the path as well as
%   the total cost of the path.
%   Arguments:
%      Graph is a N-by-3 matrix, representing all edges in the given graph.
%      Each row has the format of [U, V, W] where U and V are two nodes that
%      this edge connects and W is the weight(cost) of traveling through
%      the edge. For example, [1 5 20.2] means this edge connects
%      node 1 and 5 with cost 20.2. Please note that all edges are
%      undirected and you can assume that the nodes in Graph are indexed by
%      1, ..., n where n is the number of nodes in the Graph.
%

% Hint: You may consider constructing a different graph structure to speed up
% you code.

% OK for the dumb trivial case of an empty graph
if any(size(G) == 0)
    path = zeros(0,1);
    cost = 0;
    return
end

%G = ([Graph; Graph(:,2) Graph(:,1) Graph(:,3) ]);

% Recreate graph in new data format
n = max(max(G(:,1)),max(G(:,2)));
infty = 2*sum(G(:,3))*n; % Large value no path could eventually weigh
                             % Unfortunately, because 0*Inf = NaN we can't use Inf
Gr = cell(n,1); % The new an fancy graph

% Create the edges
for i = 1:size(G,1)
    Gr{G(i,1)} = [ Gr{G(i,1)}; G(i,2:3) ];
    Gr{G(i,2)} = [ Gr{G(i,2)}; G(i,[1 3]) ];
end
% Indecies for the graph data structure
grPath = 1;
grCost = 2;

% Create data structures
% Structure to hold all the minimum paths and their costs
minPaths = cell(n,2);
% What nodes have we seen, or found the min path for?
explored = zeros(n,1);
% Frontier of points we are looking at
% Indecies of these data structures for determining what goes where
pathInd = 1;
costInd = 2;

% Initialize frontier/seen data structures
frontier = ones(n,2)*Inf;
frontier(start, pathInd) = start;
frontier(start, costInd) = 0;

% Separate cost vector
cost = ones(n,1)*Inf;
cost(start) = 0;

t = 1;
% Begin Djikstras
while true % Begin loop
    % Get min index
    % The infty*explored makes us not revisit nodes we have found the best
    % path for again
    [minCost,minNode] = min(cost);
    if minCost == Inf
        path = zeros(0,1);
        cost = inf;
        break
    end
    minPath = frontier(minNode,pathInd);
    % Short cut the algorithm if we found our goal
    if minNode == goal
        path = [ minPaths{minPath,pathInd} ; minNode ];
        cost = minCost;
        return
    end
    % Otherwise set up for the next iteration
    % Set node to 'explored'
    explored(minNode) = true;
    cost(minNode) = Inf;
    % Set the path value
    minPaths{minNode,pathInd} = [ minPaths{minPath,pathInd} ; minNode ];
    % Set the cost value
    minPaths{minNode,costInd} = minCost;
    % Update things
    for i = 1:size(Gr{minNode},1)
        node = Gr{minNode}(i,grPath);
        if explored(node)
            continue
        end
        altCost = minCost + Gr{minNode}(i,grCost);
        if altCost < frontier(node,costInd) % Update the cost if necessary
            frontier(node,costInd) = altCost;
            frontier(node,pathInd) = minNode;
            cost(node) = altCost;
        end
    end
end

% This code means we never found it...

end
